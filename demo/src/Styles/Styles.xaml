<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:helpers="clr-namespace:Jabra_SDK_Demo.Helpers">


  <Style x:Key="OffHookStyle" TargetType="{x:Type Control}">
    <Style.Triggers>
      <DataTrigger Binding="{Binding CallControl.OffHookStatusEnabled}" Value="False">
        <Setter Property="Foreground" Value="Gray"/>
      </DataTrigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="RingerStyle" TargetType="{x:Type Control}">
    <Style.Triggers>
      <DataTrigger Binding="{Binding CallControl.RingerStatusEnabled}" Value="False">
        <Setter Property="Foreground" Value="Gray"/>
      </DataTrigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="MuteStyle" TargetType="{x:Type Control}">
    <Style.Triggers>
      <DataTrigger Binding="{Binding CallControl.MuteStatusEnabled}" Value="False">
        <Setter Property="Foreground" Value="Gray"/>
      </DataTrigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="OnHoldStyle" TargetType="{x:Type Control}">
    <Style.Triggers>
      <DataTrigger Binding="{Binding CallControl.OnHoldStatusEnabled}" Value="False">
        <Setter Property="Foreground" Value="Gray"/>
      </DataTrigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="AudioLinkStyle" TargetType="{x:Type Control}">
    <Style.Triggers>
      <DataTrigger Binding="{Binding CallControl.AudioLinkStatusEnabled}" Value="False">
        <Setter Property="Foreground" Value="Gray"/>
      </DataTrigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="BusyLightStyle" TargetType="{x:Type Control}">
    <Style.Triggers>
      <DataTrigger Binding="{Binding CallControl.BusyLightStatusEnabled}" Value="False">
        <Setter Property="Foreground" Value="Gray"/>
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <!--<Style x:Key="OffHookStyle" TargetType="{x:Type Control}">
    <Setter Property="Height" Value="30" />
    <Setter Property="Width" Value="120" />
    <Style.Triggers>
      <DataTrigger Binding="{Binding CallControl.OffHookStatusEnabled}" Value="False">
        <Setter Property="Foreground" Value="Gray"/>
      </DataTrigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="RingerStyle" TargetType="{x:Type Control}">
    <Setter Property="Height" Value="30" />
    <Setter Property="Width" Value="120" />
    <Style.Triggers>
      <DataTrigger Binding="{Binding CallControl.RingerStatusEnabled}" Value="False">
        <Setter Property="Foreground" Value="Gray"/>
      </DataTrigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="MuteStyle" TargetType="{x:Type Control}">
    <Setter Property="Height" Value="30" />
    <Setter Property="Width" Value="120" />
    <Style.Triggers>
      <DataTrigger Binding="{Binding CallControl.MuteStatusEnabled}" Value="False">
        <Setter Property="Foreground" Value="Gray"/>
      </DataTrigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="OnHoldStyle" TargetType="{x:Type Control}">
    <Setter Property="Height" Value="30" />
    <Setter Property="Width" Value="120" />
    <Style.Triggers>
      <DataTrigger Binding="{Binding CallControl.OnHoldStatusEnabled}" Value="False">
        <Setter Property="Foreground" Value="Gray"/>
      </DataTrigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="AudioLinkStyle" TargetType="{x:Type Control}">
    <Setter Property="Height" Value="30" />
    <Setter Property="Width" Value="120" />
    <Style.Triggers>
      <DataTrigger Binding="{Binding CallControl.AudioLinkStatusEnabled}" Value="False">
        <Setter Property="Foreground" Value="Gray"/>
      </DataTrigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="ClearStyle" TargetType="{x:Type Control}">
    <Setter Property="Height" Value="30" />
    <Setter Property="Width" Value="120" />
  </Style>

  <Style x:Key="BtPairingStyle" TargetType="{x:Type Control}">
    <Style.Triggers>
      <DataTrigger Binding="{Binding BtPairing.IsDongleDevice}" Value="False">
        <Setter Property="Foreground" Value="Gray"/>
      </DataTrigger>
    </Style.Triggers>
  </Style>-->

  <Style x:Key="ControlTextBlock" TargetType="TextBlock">
    <Style.Triggers>
      <DataTrigger Binding="{Binding ComboBoxControl.ControlEnabled}" Value="False">
        <Setter Property="Foreground" Value="Gray"/>
      </DataTrigger>
      <DataTrigger Binding="{Binding TextControl.ControlEnabled}" Value="False">
        <Setter Property="Foreground" Value="Gray"/>
      </DataTrigger>
      <DataTrigger Binding="{Binding StaticTextControl.ControlEnabled}" Value="False">
        <Setter Property="Foreground" Value="Gray"/>
      </DataTrigger>
      <DataTrigger Binding="{Binding RadioButtonControl.ControlEnabled}" Value="False">
        <Setter Property="Foreground" Value="Gray"/>
      </DataTrigger>
      <DataTrigger Binding="{Binding ButtonControl.ControlEnabled}" Value="False">
        <Setter Property="Foreground" Value="Gray"/>
      </DataTrigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="ControlTextBox" TargetType="TextBox">
    <Style.Triggers>
      <DataTrigger Binding="{Binding ComboBoxControl.ControlEnabled}" Value="False">
        <Setter Property="Foreground" Value="Gray"/>
      </DataTrigger>
      <DataTrigger Binding="{Binding TextControl.ControlEnabled}" Value="False">
        <Setter Property="Foreground" Value="Gray"/>
      </DataTrigger>
      <DataTrigger Binding="{Binding StaticTextControl.ControlEnabled}" Value="False">
        <Setter Property="Foreground" Value="Gray"/>
      </DataTrigger>
      <DataTrigger Binding="{Binding RadioButtonControl.ControlEnabled}" Value="False">
        <Setter Property="Foreground" Value="Gray"/>
      </DataTrigger>
      <DataTrigger Binding="{Binding ButtonControl.ControlEnabled}" Value="False">
        <Setter Property="Foreground" Value="Gray"/>
      </DataTrigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="ControlButton" TargetType="Button">
    <Style.Triggers>
      <DataTrigger Binding="{Binding ComboBoxControl.ControlEnabled}" Value="False">
        <Setter Property="Foreground" Value="Gray"/>
      </DataTrigger>
      <DataTrigger Binding="{Binding TextControl.ControlEnabled}" Value="False">
        <Setter Property="Foreground" Value="Gray"/>
      </DataTrigger>
      <DataTrigger Binding="{Binding StaticTextControl.ControlEnabled}" Value="False">
        <Setter Property="Foreground" Value="Gray"/>
      </DataTrigger>
      <DataTrigger Binding="{Binding RadioButtonControl.ControlEnabled}" Value="False">
        <Setter Property="Foreground" Value="Gray"/>
      </DataTrigger>
      <DataTrigger Binding="{Binding ButtonControl.ControlEnabled}" Value="False">
        <Setter Property="Foreground" Value="Gray"/>
      </DataTrigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="ControlComboBox"  TargetType="ComboBox">
    <Style.Triggers>
      <DataTrigger Binding="{Binding ComboBoxControl.ControlEnabled}" Value="False">
        <Setter Property="Foreground" Value="Gray"/>
      </DataTrigger>
      <DataTrigger Binding="{Binding TextControl.ControlEnabled}" Value="False">
        <Setter Property="Foreground" Value="Gray"/>
      </DataTrigger>
      <DataTrigger Binding="{Binding StaticTextControl.ControlEnabled}" Value="False">
        <Setter Property="Foreground" Value="Gray"/>
      </DataTrigger>
      <DataTrigger Binding="{Binding RadioButtonControl.ControlEnabled}" Value="False">
        <Setter Property="Foreground" Value="Gray"/>
      </DataTrigger>
      <DataTrigger Binding="{Binding ButtonControl.ControlEnabled}" Value="False">
        <Setter Property="Foreground" Value="Gray"/>
      </DataTrigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="ControlRadioButton" TargetType="RadioButton">
    <Style.Triggers>
      <DataTrigger Binding="{Binding ComboBoxControl.ControlEnabled}" Value="False">
        <Setter Property="Foreground" Value="Gray"/>
      </DataTrigger>
      <DataTrigger Binding="{Binding TextControl.ControlEnabled}" Value="False">
        <Setter Property="Foreground" Value="Gray"/>
      </DataTrigger>
      <DataTrigger Binding="{Binding StaticTextControl.ControlEnabled}" Value="False">
        <Setter Property="Foreground" Value="Gray"/>
      </DataTrigger>
      <DataTrigger Binding="{Binding RadioButtonControl.ControlEnabled}" Value="False">
        <Setter Property="Foreground" Value="Gray"/>
      </DataTrigger>
      <DataTrigger Binding="{Binding ButtonControl.ControlEnabled}" Value="False">
        <Setter Property="Foreground" Value="Gray"/>
      </DataTrigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="ControlCheckBox" TargetType="CheckBox">
    <Style.Triggers>
      <DataTrigger Binding="{Binding ComboBoxControl.ControlEnabled}" Value="False">
        <Setter Property="Foreground" Value="Gray"/>
      </DataTrigger>
      <DataTrigger Binding="{Binding TextControl.ControlEnabled}" Value="False">
        <Setter Property="Foreground" Value="Gray"/>
      </DataTrigger>
      <DataTrigger Binding="{Binding StaticTextControl.ControlEnabled}" Value="False">
        <Setter Property="Foreground" Value="Gray"/>
      </DataTrigger>
      <DataTrigger Binding="{Binding RadioButtonControl.ControlEnabled}" Value="False">
        <Setter Property="Foreground" Value="Gray"/>
      </DataTrigger>
      <DataTrigger Binding="{Binding ButtonControl.ControlEnabled}" Value="False">
        <Setter Property="Foreground" Value="Gray"/>
      </DataTrigger>
    </Style.Triggers>
  </Style>


  <SolidColorBrush x:Key="JabraTransparent" Color="White"  Opacity="0.1" />

  <Style TargetType="{x:Type TabPanel}">
    <Setter Property="HorizontalAlignment" Value="Center" />
  </Style>

  <Style x:Key="MainTabTabItem" TargetType="TabItem">
    <Setter Property="Background" Value="LightGray"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="TabItem">
          <Border Name="Border" BorderThickness="1,1,1,0" BorderBrush="Gainsboro" CornerRadius="4,4,0,0" Margin="2,0">
            <ContentPresenter x:Name="ContentSite"
                                        VerticalAlignment="Center"
                                        HorizontalAlignment="Center"
                                        ContentSource="Header"
                                        Margin="10,2"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsSelected" Value="True">
              <Setter TargetName="Border" Property="Background" Value="LightSkyBlue" />
            </Trigger>
            <Trigger Property="IsSelected" Value="False">
              <Setter TargetName="Border" Property="Background" Value="GhostWhite" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="MainTabControl" TargetType="{x:Type TabControl}">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabControl}">
          <Grid KeyboardNavigation.TabNavigation="Local">
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto"/>
              <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <TabPanel 
              Name="HeaderPanel"
              Grid.Row="0"
              Panel.ZIndex="1" 
              Margin="0,0,4,-1" 
              IsItemsHost="True"
              KeyboardNavigation.TabIndex="1"
              Background="Transparent" />
            <Border 
              Name="Border" 
              Grid.Row="1" 
              Background="#f2f2f2" 
              BorderBrush="Transparent" 
              BorderThickness="1" 
              CornerRadius="2" 
              KeyboardNavigation.TabNavigation="Local"
              KeyboardNavigation.DirectionalNavigation="Contained"
              KeyboardNavigation.TabIndex="2" >
              <ContentPresenter 
                Name="PART_SelectedContentHost"
                Margin="4"
                ContentSource="SelectedContent" />
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Foreground" Value="Gray" />
              <Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type ListBoxItem}">
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="Padding" Value="2,0,0,0"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBoxItem}">
          <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="Transparent"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Background" Value="Transparent"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--  Style for AJAX-like wait spinners  -->
  <Style x:Key="WaitSpinnerStyle" TargetType="{x:Type Control}">
    <Setter Property="Foreground" Value="#FF5482A1" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Control}">
          <Viewbox Visibility="{TemplateBinding Visibility}">
            <Canvas Width="120"
                                Height="120"
                                RenderTransformOrigin="0.5,0.5">
              <Canvas.RenderTransform>
                <RotateTransform x:Name="SpinnerRotate" Angle="0" />
              </Canvas.RenderTransform>
              <Canvas.Triggers>
                <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                  <BeginStoryboard>
                    <Storyboard>
                      <DoubleAnimation Duration="0:0:01.3"
                                                             From="0"
                                                             RepeatBehavior="Forever"
                                                             Storyboard.TargetName="SpinnerRotate"
                                                             Storyboard.TargetProperty="Angle"
                                                             To="360" />
                    </Storyboard>
                  </BeginStoryboard>
                </EventTrigger>
              </Canvas.Triggers>
              <Ellipse Canvas.Left="20.1696"
                                     Canvas.Top="9.76358"
                                     Width="21.835"
                                     Height="21.862"
                                     Fill="{TemplateBinding Foreground}"
                                     Opacity="1.0"
                                     Stretch="Fill" />
              <Ellipse Canvas.Left="2.86816"
                                     Canvas.Top="29.9581"
                                     Width="20.835"
                                     Height="20.862"
                                     Fill="{TemplateBinding Foreground}"
                                     Opacity="0.9"
                                     Stretch="Fill" />
              <Ellipse Canvas.Left="0.00001"
                                     Canvas.Top="57.9341"
                                     Width="19.835"
                                     Height="19.862"
                                     Fill="{TemplateBinding Foreground}"
                                     Opacity="0.8"
                                     Stretch="Fill" />
              <Ellipse Canvas.Left="12.1203"
                                     Canvas.Top="83.3163"
                                     Width="17.835"
                                     Height="17.862"
                                     Fill="{TemplateBinding Foreground}"
                                     Opacity="0.7"
                                     Stretch="Fill" />
              <Ellipse Canvas.Left="36.5459"
                                     Canvas.Top="98.1380"
                                     Width="16.835"
                                     Height="16.862"
                                     Fill="{TemplateBinding Foreground}"
                                     Opacity="0.6"
                                     Stretch="Fill" />
              <Ellipse Canvas.Left="64.6723"
                                     Canvas.Top="96.8411"
                                     Width="14.835"
                                     Height="14.862"
                                     Fill="{TemplateBinding Foreground}"
                                     Opacity="0.5"
                                     Stretch="Fill" />
              <Ellipse Canvas.Left="87.6176"
                                     Canvas.Top="81.2783"
                                     Width="13.835"
                                     Height="13.862"
                                     Fill="{TemplateBinding Foreground}"
                                     Opacity="0.4"
                                     Stretch="Fill" />
              <Ellipse Canvas.Left="98.165"
                                     Canvas.Top="54.4140"
                                     Width="12.835"
                                     Height="12.862"
                                     Fill="{TemplateBinding Foreground}"
                                     Opacity="0.3"
                                     Stretch="Fill" />
              <Ellipse Canvas.Left="92.9838"
                                     Canvas.Top="26.9938"
                                     Width="11.835"
                                     Height="11.862"
                                     Fill="{TemplateBinding Foreground}"
                                     Opacity="0.2"
                                     Stretch="Fill" />
            </Canvas>
          </Viewbox>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="MlbMenuItem" TargetType="{x:Type MenuItem}">
    <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Menu}}}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type MenuItem}">
          <Border x:Name="Border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition x:Name="Col0" MinWidth="17" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuTextColumnGroup"/>
                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                <ColumnDefinition x:Name="Col3" Width="14"/>
              </Grid.ColumnDefinitions>

              <!-- ContentPresenter to show an Icon if needed -->
              <ContentPresenter Grid.Column="0" Margin="4,0,6,0" x:Name="Icon" VerticalAlignment="Center" ContentSource="Icon"/>

              <!-- Glyph is a checkmark if needed for a checkable menu -->
              <Grid Grid.Column="0" Visibility="Hidden" Margin="4,0,6,0" x:Name="GlyphPanel" VerticalAlignment="Center">
                <Path x:Name="GlyphPanelpath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z" FlowDirection="LeftToRight"/>
              </Grid>

              <!-- Content for the menu text etc -->
              <ContentPresenter Grid.Column="1"
                                          Margin="{TemplateBinding Padding}"
                                          x:Name="HeaderHost"
                                          RecognizesAccessKey="True"
                                          ContentSource="Header"/>

              <!-- Content for the menu IGT -->
              <ContentPresenter Grid.Column="2"
                                          Margin="8,1,8,1"
                                          x:Name="IGTHost"
                                          ContentSource="InputGestureText"
                                          VerticalAlignment="Center"/>

              <!-- Arrow drawn path which points to the next level of the menu -->
              <Grid Grid.Column="3" Margin="4,0,6,0" x:Name="ArrowPanel" VerticalAlignment="Center">
                <Path x:Name="ArrowPanelPath" HorizontalAlignment="Right" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,0 L0,8 L4,4 z"/>
              </Grid>

              <!-- The Popup is the body of the menu which expands down or across depending on the level of the item -->
              <Popup IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Right" x:Name="SubMenuPopup" Focusable="false" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                <Border x:Name="SubMenuBorder" BorderBrush="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Menu}}}" BorderThickness="1" Padding="2,2,2,2">
                  <Grid x:Name="SubMenu" Grid.IsSharedSizeScope="True">
                    <!-- StackPanel holds children of the menu. This is set by IsItemsHost=True -->
                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                  </Grid>
                </Border>
              </Popup>
            </Grid>
          </Border>

          <!-- These triggers re-configure the four arrangements of MenuItem to show different levels of menu via Role -->
          <ControlTemplate.Triggers>
            <!-- Role = TopLevelHeader : this is the root menu item in a menu; the Popup expands down -->
            <Trigger Property="Role" Value="TopLevelHeader">
              <Setter Property="Padding" Value="6,1,6,1"/>
              <Setter Property="Placement" Value="Bottom" TargetName="SubMenuPopup"/>
              <Setter Property="MinWidth" Value="0" TargetName="Col0"/>
              <Setter Property="Width" Value="Auto" TargetName="Col3"/>
              <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
              <Setter Property="Visibility" Value="Collapsed" TargetName="GlyphPanel"/>
              <Setter Property="Visibility" Value="Collapsed" TargetName="IGTHost"/>
              <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
            </Trigger>

            <!-- Role = TopLevelItem :  this is a child menu item from the top level without any child items-->
            <Trigger Property="Role" Value="TopLevelItem">
              <Setter Property="Padding" Value="6,1,6,1"/>
              <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
            </Trigger>

            <!-- Role = SubMenuHeader : this is a child menu item which does not have children -->
            <Trigger Property="Role" Value="SubmenuHeader">
              <Setter Property="DockPanel.Dock" Value="Top"/>
              <Setter Property="Padding" Value="0,2,0,2"/>
            </Trigger>

            <!-- Role = SubMenuItem : this is a child menu item which has children-->
            <Trigger Property="Role" Value="SubmenuItem">
              <Setter Property="DockPanel.Dock" Value="Top"/>
              <Setter Property="Padding" Value="0,2,0,2"/>
              <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
            </Trigger>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
              <Setter Property="PopupAnimation" Value="None" TargetName="SubMenuPopup"/>
            </Trigger>

            <!-- If no Icon is present the we collapse the Icon Content -->
            <Trigger Property="Icon" Value="{x:Null}">
              <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
            </Trigger>

            <!-- The GlyphPanel contains the CheckMark -->
            <Trigger Property="IsChecked" Value="true">
              <Setter Property="Visibility" Value="Visible" TargetName="GlyphPanel"/>
              <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
            </Trigger>

            <!-- Using the system colors for the Menu Highlight and IsEnabled-->
            <Trigger Property="IsHighlighted" Value="true">
              <Setter Property="Background" Value="LightGray" TargetName="Border"/>
              <Setter Property="Foreground" Value="Black"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="LightGray"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="PlayButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Background" Value="{x:Null}" />
    <Setter Property="BorderBrush" Value="{x:Null}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Padding" Value="1" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border x:Name="border"
                            Width="Auto"
                            Height="Auto"
                            BorderThickness="1"
                            CornerRadius="2">
            <Grid Width="Auto" Height="Auto">
              <Image x:Name="Dimmed"
                                   Width="17"
                                   Height="17"
                                   Source="../Images/PlayDimmed.png"
                                   Stretch="Fill"
                                   Visibility="Hidden" />
              <Image x:Name="Play"
                                   Width="17"
                                   Height="17"
                                   Source="../Images/Play.png"
                                   Stretch="Fill" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="border" Property="BorderBrush" Value="#FFCCCCCC" />
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
              <Setter TargetName="border" Property="BorderBrush" Value="#FF999999" />
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="true" >
              <Setter TargetName="border" Property="BorderBrush" Value="#FFCCCCCC" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true" />
            <Trigger Property="IsEnabled" Value="false">
              <Setter TargetName="Play" Property="Visibility" Value="Hidden" />
              <Setter TargetName="Dimmed" Property="Visibility" Value="Visible" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

</ResourceDictionary>